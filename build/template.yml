AWSTemplateFormatVersion: '2010-09-09'
# Transform: 'AWS::Serverless-2016-10-31'
Description: ''

Parameters:

  Application:
    Description: 'Name of the application for billing'
    Type: 'String'
  
  Environment:
    Description: 'Name of the deployment environment'
    Type: 'String'
    
  GitHubRepository:
    Description: 'The GitHub repository owner/name for this application'
    Type: 'String'
  
  GitHubSourceVersion:
    Default: 'initializing'
    Description: 'The source version to use for version-specific items, e.g. container tags'
    Type: 'String'
  
  AlertEmail:
    Description: 'Email to which administrative alerts are sent'
    Type: 'String'
  
  AlertPhone:
    Description: 'Phone number to which administrative alerts are sent via SMS'
    Type: 'String'
    
Conditions:
  
  IsNotInitializing: !Not
    - !Equals
      - !Sub '${GitHubSourceVersion}'
      - 'initializing'

# Globals:
  
#   Function:
#     MemorySize: 1792
#     Timeout: 30
#     Tags:
#       Application: !Sub '${Application}'
#       Environment: !Sub '${Environment}'
#     Environment:
#       Variables:
#         APPLICATION: !Sub '${Application}'
#         ENVIRONMENT: !Sub '${Environment}'
#         AWS_ACCOUNT_ID: !Sub '${AWS::AccountId}'
        
Resources:

  # Example Fargate Service
  
  ExpressExampleTaskRole:
    Type: 'AWS::IAM::Role'
    Condition: 'IsNotInitializing'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Action: 'sts:AssumeRole'
            Principal:
              Service: !Sub 'ecs-tasks.${AWS::URLSuffix}'
      Tags:
        - Key: 'Application'
          Value: !Sub '${Application}'
        - Key: 'Environment'
          Value: !Sub '${Environment}'
        - Key: 'Resource'
          Value: !Sub '${Application}-${Environment}-express-example-task-role'

  ExpressExampleFargateDefinition:
    Type: 'AWS::ECS::TaskDefinition'
    Condition: 'IsNotInitializing'
    Properties:
      Cpu: 256
      Memory: 512
      NetworkMode: 'awsvpc'
      ExecutionRoleArn: !Sub '${EcsTaskExecutionRole.Arn}'
      TaskRoleArn: !Sub '${ExpressExampleTaskRole.Arn}'
      RequiresCompatibilities:
        - 'FARGATE'
      RuntimePlatform:
        CpuArchitecture: 'ARM64'
        OperatingSystemFamily: 'LINUX'
      ContainerDefinitions:
        - Name: 'express-example'
          Image: !Sub '${AWS::AccountId}.dkr.ecr.${AWS::Region}.${AWS::URLSuffix}/${EcsRepository}:express-example-${GitHubSourceVersion}-aarch64'
          Essential: true
          Command: ['node', 'server.js']
          LogConfiguration:
            LogDriver: 'awslogs'
            Options:
              awslogs-region: !Sub '${AWS::Region}'
              awslogs-group: !Sub '${EcsLogGroup}'
              awslogs-stream-prefix: 'express-example'
          Environment:
            - Name: 'APPLICATION'
              Value: !Sub '${Application}'
            - Name: 'ENVIRONMENT'
              Value: !Sub '${Environment}'
            - Name: 'AWS_REGION'
              Value: !Sub '${AWS::Region}'
            - Name: 'AWS_DEFAULT_REGION'
              Value: !Sub '${AWS::Region}'
      Tags:
        - Key: 'Application'
          Value: !Sub '${Application}'
        - Key: 'Environment'
          Value: !Sub '${Environment}'
        - Key: 'Resource'
          Value: !Sub 'express-example-fargate-definition'

  ExpressExampleService:
    Type: 'AWS::ECS::Service'
    Condition: 'IsNotInitializing'
    Properties:
      Cluster: !Sub '${EcsCluster}'
      LaunchType: 'FARGATE'
      PlatformVersion: '1.4.0'
      # PropagateTags: 'SERVICE'
      TaskDefinition: !Sub '${ExpressExampleFargateDefinition}'
      SchedulingStrategy: 'REPLICA'
      DesiredCount: 1
      # LoadBalancers:
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: 'ENABLED'
          SecurityGroups:
            - !Sub '${Vpc.DefaultSecurityGroup}'
          Subnets:
            - !Sub '${SubnetA}'
            - !Sub '${SubnetB}'
            - !Sub '${SubnetC}'
      Tags:
        - Key: 'Application'
          Value: !Sub '${Application}'
        - Key: 'Environment'
          Value: !Sub '${Environment}'
        - Key: 'Resource'
          Value: !Sub 'express-example-ecs-service'

  # ECS Environment
  
  EcsCluster:
    Type: 'AWS::ECS::Cluster'
    Condition: 'IsNotInitializing'
    Properties:
      ClusterName: !Sub '${Application}-${Environment}'
      ClusterSettings: 
        - Name: 'containerInsights'
          Value: 'enabled'
      Tags: 
        - Key: 'Application'
          Value: !Sub '${Application}'
        - Key: 'Environment'
          Value: !Sub '${Environment}'
        - Key: 'Resource'
          Value: 'ecs-cluster'

  EcsTaskExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub '${Application}-${Environment}-ecs-task-execution'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Action: 'sts:AssumeRole'
            Principal:
              Service: !Sub 'ecs-tasks.${AWS::URLSuffix}'
      Policies:
        - PolicyName: 'ecs-task-execution'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action:
                  - 'ecr:GetAuthorizationToken'
                  - 'ecr:BatchCheckLayerAvailability'
                  - 'ecr:GetDownloadUrlForLayer'
                  - 'ecr:BatchGetImage'
                Resource:
                  - '*'
              - Effect: 'Allow'
                Action: 
                  - 'ssm:GetParameters'
                Resource:
                  - !Sub 'arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${Application}/${Environment}/*'
              - Effect: 'Allow'
                Action:
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource:
                  - !Sub '${EcsLogGroup.Arn}'
      Tags:
        - Key: 'Application'
          Value: !Sub '${Application}'
        - Key: 'Environment'
          Value: !Sub '${Environment}'
        - Key: 'Resource'
          Value: !Sub 'ecs-task-execution-role'

  EcsLogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: !Sub '/${Application}/${Environment}/ecs'
      # RetentionInDays: 14

  EcsTaskExecutionRole:
    Type: 'AWS::IAM::Role'
    Condition: 'IsNotInitializing'
    Properties:
      RoleName: !Sub '${Application}-${Environment}-ecs-task-execution'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Action: 'sts:AssumeRole'
            Principal:
              Service: !Sub 'ecs-tasks.${AWS::URLSuffix}'
      Policies:
        - PolicyName: 'ecs-task-execution'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action:
                  - 'ecr:GetAuthorizationToken'
                  - 'ecr:BatchCheckLayerAvailability'
                  - 'ecr:GetDownloadUrlForLayer'
                  - 'ecr:BatchGetImage'
                Resource:
                  - '*'
              - Effect: 'Allow'
                Action: 
                  - 'ssm:GetParameters'
                Resource:
                  - !Sub 'arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${Application}/${Environment}/*'
              - Effect: 'Allow'
                Action:
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource:
                  - !Sub '${EcsLogGroup.Arn}'
      Tags:
        - Key: 'Application'
          Value: !Sub '${Application}'
        - Key: 'Environment'
          Value: !Sub '${Environment}'
        - Key: 'Resource'
          Value: !Sub 'ecs-task-execution-role'
  
  EcsRepository:
    Type: 'AWS::ECR::Repository'
    Properties:
      RepositoryName: !Sub '${Application}-${Environment}'
      RepositoryPolicyText:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              AWS: 
                - !Sub '${EcsTaskExecutionRole.Arn}'
            Action:
              - 'ecr:GetDownloadUrlForLayer'
              - 'ecr:BatchGetImage'
              - 'ecr:BatchCheckLayerAvailability'
          - Effect: 'Allow'
            Principal:
              AWS: !Sub '${ContainerBuildRole.Arn}'
            Action:
              - 'ecr:BatchGetImage'
              - 'ecr:BatchCheckLayerAvailability'
              - 'ecr:CompleteLayerUpload'
              - 'ecr:DescribeImages'
              - 'ecr:GetDownloadUrlForLayer'
              - 'ecr:InitiateLayerUpload'
              - 'ecr:PutImage'
              - 'ecr:UploadLayerPart'
      LifecyclePolicy:
        LifecyclePolicyText: |-
          {
            "rules": [
              {
                "action": {
                  "type": "expire"
                },
                "selection": {
                  "countType": "sinceImagePushed",
                  "countUnit": "days",
                  "countNumber": 1,
                  "tagStatus": "untagged"
                },
                "description": "Expire Untagged Images",
                "rulePriority": 1
              }
            ]
          }
      Tags:
        - Key: 'Application'
          Value: !Sub '${Application}'
        - Key: 'Environment'
          Value: !Sub '${Environment}'
        - Key: 'Resource'
          Value: !Sub 'ecs-respository'
  
  # VPC

  Vpc:
    Type: 'AWS::EC2::VPC'
    Condition: 'IsNotInitializing'
    Properties:
      CidrBlock: '10.0.0.0/16'
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: 'Application'
          Value: !Sub '${Application}'
        - Key: 'Environment'
          Value: !Sub '${Environment}'
        - Key: 'Resource'
          Value: !Sub 'vpc'
        - Key: 'Name'
          Value: !Sub '${Application}-${Environment}'
  
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Condition: 'IsNotInitializing'
    Properties:
      Tags:
        - Key: 'Application'
          Value: !Sub '${Application}'
        - Key: 'Environment'
          Value: !Sub '${Environment}'
        - Key: 'Resource'
          Value: !Sub 'internet-gateway'
        - Key: 'Name'
          Value: !Sub '${Application}-${Environment}'
  
  InternetGatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Condition: 'IsNotInitializing'
    Properties:
      InternetGatewayId: !Sub '${InternetGateway}'
      VpcId: !Sub '${Vpc}'

  RouteTable:
    Type: 'AWS::EC2::RouteTable'
    Condition: 'IsNotInitializing'
    Properties:
      VpcId: !Sub '${Vpc}'
      Tags:
        - Key: 'Application'
          Value: !Sub '${Application}'
        - Key: 'Environment'
          Value: !Sub '${Environment}'
        - Key: 'Resource'
          Value: !Sub 'route-table'
        - Key: 'Name'
          Value: !Sub '${Application}-${Environment}'
  
  InternetRoute:
    Type: 'AWS::EC2::Route'
    Condition: 'IsNotInitializing'
    Properties:
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Sub '${InternetGateway}'
      RouteTableId: !Sub '${RouteTable}'
  
  S3Route:
    Type: 'AWS::EC2::VPCEndpoint'
    Condition: 'IsNotInitializing'
    Properties:
      RouteTableIds:
        - !Sub '${RouteTable}'
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.s3'
      VpcId: !Sub '${Vpc}'
  
  SubnetA:
    Type: 'AWS::EC2::Subnet'
    Condition: 'IsNotInitializing'
    Properties: 
      AvailabilityZone: 
        Fn::Select:
          - 0
          - Fn::GetAZs: ''
      CidrBlock: '10.0.0.0/19'
      MapPublicIpOnLaunch: true
      VpcId: !Sub '${Vpc}'
      Tags:
        - Key: 'Application'
          Value: !Sub '${Application}'
        - Key: 'Environment'
          Value: !Sub '${Environment}'
        - Key: 'Resource'
          Value: !Sub 'subnet-a'
        - Key: 'Name'
          Value: !Sub '${Application}-${Environment}-a'
  
  SubnetRouteA:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Condition: 'IsNotInitializing'
    Properties:
      RouteTableId: !Sub '${RouteTable}'
      SubnetId: !Sub '${SubnetA}'
  
  SubnetB:
    Type: 'AWS::EC2::Subnet'
    Condition: 'IsNotInitializing'
    Properties: 
      AvailabilityZone: 
        Fn::Select:
          - 1
          - Fn::GetAZs: ''
      CidrBlock: '10.0.32.0/19'
      MapPublicIpOnLaunch: true
      VpcId: !Sub '${Vpc}'
      Tags:
        - Key: 'Application'
          Value: !Sub '${Application}'
        - Key: 'Environment'
          Value: !Sub '${Environment}'
        - Key: 'Resource'
          Value: !Sub 'subnet-b'
        - Key: 'Name'
          Value: !Sub '${Application}-${Environment}-b'
  
  SubnetRouteB:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Condition: 'IsNotInitializing'
    Properties:
      RouteTableId: !Sub '${RouteTable}'
      SubnetId: !Sub '${SubnetB}'
  
  SubnetC:
    Type: 'AWS::EC2::Subnet'
    Condition: 'IsNotInitializing'
    Properties: 
      AvailabilityZone: 
        Fn::Select:
          - 2
          - Fn::GetAZs: ''
      CidrBlock: '10.0.64.0/19'
      MapPublicIpOnLaunch: true
      VpcId: !Sub '${Vpc}'
      Tags:
        - Key: 'Application'
          Value: !Sub '${Application}'
        - Key: 'Environment'
          Value: !Sub '${Environment}'
        - Key: 'Resource'
          Value: !Sub 'subnet-c'
        - Key: 'Name'
          Value: !Sub '${Application}-${Environment}-c'
  
  SubnetRouteC:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Condition: 'IsNotInitializing'
    Properties:
      RouteTableId: !Sub '${RouteTable}'
      SubnetId: !Sub '${SubnetC}'

  HttpIngress:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Condition: 'IsNotInitializing'
    Properties:
      GroupId: !Sub '${Vpc.DefaultSecurityGroup}'
      IpProtocol: 'tcp'
      CidrIp: '0.0.0.0/0'
      FromPort: 80
      ToPort: 80

  # Build Pipeline
  
  BuildBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Sub '${Application}-${Environment}-${AWS::AccountId}-${AWS::Region}-build'
      # LifecycleConfiguration:
      #   Rules:
      #     - Id: 'daily-cleanup'
      #       Status: 'Enabled'
      #       AbortIncompleteMultipartUpload:
      #         DaysAfterInitiation: 1
      #       ExpirationInDays: 1
      #       NoncurrentVersionExpirationInDays: 1
      PublicAccessBlockConfiguration:
        BlockPublicAcls: True
        BlockPublicPolicy: True
        IgnorePublicAcls: True
        RestrictPublicBuckets: True
      Tags:
        - Key: 'Application'
          Value: !Sub '${Application}'
        - Key: 'Environment'
          Value: !Sub '${Environment}'
        - Key: 'Resource'
          Value: !Sub 'build-bucket'

  CloudFormationBuildRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub '${Application}-${Environment}-codebuild-cloudformation'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Action: 'sts:AssumeRole'
            Principal:
              Service: 
                - !Sub 'codebuild.${AWS::URLSuffix}'
      Policies:
        - PolicyName: 'cloudformation-build'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action:
                  - 'cloudformation:DescribeStacks'
                Resource:
                  - !Sub '${AWS::StackId}'
              - Effect: 'Allow'
                Action:
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource:
                  - !Sub 'arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/${Application}-${Environment}-cloudformation*'
              - Effect: 'Allow'
                Action:
                  - 's3:GetObject'
                  - 's3:PutObject'
                Resource:
                  - !Sub '${BuildBucket.Arn}/*'
      Tags:
        - Key: 'Application'
          Value: !Sub '${Application}'
        - Key: 'Environment'
          Value: !Sub '${Environment}'
        - Key: 'Resource'
          Value: !Sub 'cloudformation-build-role'
  
  CloudFormationBuildLogs:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: !Sub '/aws/codebuild/${CloudFormationBuildProject}'
      
  CloudFormationBuildProject:
    Type: 'AWS::CodeBuild::Project'
    Properties:
      Name: !Sub '${Application}-${Environment}-cloudformation'
      TimeoutInMinutes: 15
      Artifacts:
        Type: 'CODEPIPELINE'
      Cache:
        Type: 'NO_CACHE'
      ServiceRole: !Sub '${CloudFormationBuildRole.Arn}'
      Source:
        Type: 'CODEPIPELINE'
        BuildSpec: 'build/buildspec_cfn.yml'
      Environment:
        ComputeType: 'BUILD_GENERAL1_SMALL'
        Image: 'aws/codebuild/amazonlinux2-x86_64-standard:3.0'
        Type: 'LINUX_CONTAINER'
        EnvironmentVariables:
          - Name: 'APPLICATION'
            Value: !Sub '${Application}'
          - Name: 'ENVIRONMENT'
            Value: !Sub '${Environment}'
          - Name: 'GITHUB_REPOSITORY'
            Value: !Sub '${GitHubRepository}'
          - Name: 'ALERT_EMAIL'
            Value: !Sub '${AlertEmail}'
          - Name: 'ALERT_PHONE'
            Value: !Sub '${AlertPhone}'
          - Name: 'BUILD_BUCKET'
            Value: !Sub '${BuildBucket}'
      Tags:
        - Key: 'Application'
          Value: !Sub '${Application}'
        - Key: 'Environment'
          Value: !Sub '${Environment}'
        - Key: 'Resource'
          Value: !Sub 'cloudformation-build-project'

  ContainerBuildRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub '${Application}-${Environment}-codebuild-container'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Action: 'sts:AssumeRole'
            Principal:
              Service: 
                - !Sub 'codebuild.${AWS::URLSuffix}'
      ManagedPolicyArns: # TODO: Reduce Permissions
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/AdministratorAccess'
      Tags:
        - Key: 'Application'
          Value: !Sub '${Application}'
        - Key: 'Environment'
          Value: !Sub '${Environment}'
        - Key: 'Resource'
          Value: !Sub 'container-build-role'
  
  BatchBuildRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub '${Application}-${Environment}-codebuild-batch'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Action: 'sts:AssumeRole'
            Principal:
              Service: 
                - !Sub 'codebuild.${AWS::URLSuffix}'
      ManagedPolicyArns: # TODO: Reduce Permissions
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/AdministratorAccess'
      Tags:
        - Key: 'Application'
          Value: !Sub '${Application}'
        - Key: 'Environment'
          Value: !Sub '${Environment}'
        - Key: 'Resource'
          Value: !Sub 'batch-build-role'
  
  ContainerBuildProject:
    Type: 'AWS::CodeBuild::Project'
    Properties:
      Name: !Sub '${Application}-${Environment}-container'
      TimeoutInMinutes: 120
      Artifacts:
        Type: 'CODEPIPELINE'
      BuildBatchConfig:
        CombineArtifacts: false
        Restrictions:
          ComputeTypesAllowed:
            - 'BUILD_GENERAL1_SMALL'
          MaximumBuildsAllowed: 2
        ServiceRole: !Sub '${BatchBuildRole.Arn}'
        TimeoutInMins: 120
      Cache:
        Type: 'NO_CACHE'
      ServiceRole: !Sub '${ContainerBuildRole.Arn}'
      Source:
        Type: 'CODEPIPELINE'
        BuildSpec: 'build/buildspec_batch.yml'
      Environment:
        ComputeType: 'BUILD_GENERAL1_SMALL'
        Image: 'aws/codebuild/amazonlinux2-x86_64-standard:3.0'
        Type: 'LINUX_CONTAINER'
        EnvironmentVariables:
          - Name: 'APPLICATION'
            Value: !Sub '${Application}'
          - Name: 'ENVIRONMENT'
            Value: !Sub '${Environment}'
          - Name: 'CONTAINER_REPO'
            Value: !Sub '${AWS::AccountId}.dkr.ecr.${AWS::Region}.${AWS::URLSuffix}/${EcsRepository}'
          - Name: 'DOCKER_CLI_EXPERIMENTAL'
            Value: 'enabled'
          - Name: 'BUILD_BUCKET'
            Value: !Sub '${BuildBucket}'
      Tags:
        - Key: 'Application'
          Value: !Sub '${Application}'
        - Key: 'Environment'
          Value: !Sub '${Environment}'
        - Key: 'Resource'
          Value: !Sub 'container-build-project'

  CloudFormationDeployRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub '${Application}-${Environment}-cloudformation-deploy'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Action: 'sts:AssumeRole'
            Principal:
              Service: 
                - !Sub 'cloudformation.${AWS::URLSuffix}'
      ManagedPolicyArns:
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/AdministratorAccess'
      Tags:
        - Key: 'Application'
          Value: !Sub '${Application}'
        - Key: 'Environment'
          Value: !Sub '${Environment}'
        - Key: 'Resource'
          Value: !Sub 'cloudformation-deploy-role'
  
  BuildPipelineRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub '${Application}-${Environment}-codepipeline'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Action: 'sts:AssumeRole'
            Principal:
              Service: 
                - !Sub 'codepipeline.${AWS::URLSuffix}'
      Policies:
        - PolicyName: 'codepipeline'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action:
                  - 'cloudformation:*'
                Resource:
                  - '*'
              - Effect: 'Allow'
                Action:
                  - 'codebuild:*Build*'
                Resource:
                  - !Sub '${CloudFormationBuildProject.Arn}'
                  - !Sub '${ContainerBuildProject.Arn}'
              - Effect: 'Allow'
                Action:
                  - 'codestar-connections:UseConnection'
                Resource:
                  - '{{resolve:ssm:/GitHubConnectionArn/<MY_CONNECTION_NAME>}}'
              - Effect: 'Allow'
                Action:
                  - 'iam:PassRole'
                Resource:
                  - !Sub '${CloudFormationDeployRole.Arn}'
              - Effect: 'Allow'
                Action:
                  - 's3:GetObject*'
                  - 's3:GetReplicationConfiguration'
                  - 's3:ListBucket'
                  - 's3:PutObject*'
                  - 's3:Replicate*'
                Resource:
                  - !Sub '${BuildBucket.Arn}'
                  - !Sub '${BuildBucket.Arn}/*'
      Tags:
        - Key: 'Application'
          Value: !Sub '${Application}'
        - Key: 'Environment'
          Value: !Sub '${Environment}'
        - Key: 'Resource'
          Value: !Sub 'build-pipeline-role'
  
  BuildPipeline:
    Type: 'AWS::CodePipeline::Pipeline'
    Properties:
      Name: !Sub '${Application}-${Environment}'
      ArtifactStores:
        - Region: !Sub '${AWS::Region}'
          ArtifactStore:
            Location: !Sub '${BuildBucket}'
            Type: 'S3'
      RestartExecutionOnUpdate: true
      RoleArn: !Sub '${BuildPipelineRole.Arn}'
      Stages:
        - Name: 'Source'
          Actions:
            - Name: 'SourceAction'
              OutputArtifacts:
                - Name: 'SourceArtifact'
              ActionTypeId: 
                Category: 'Source'
                Owner: 'AWS'
                Provider: 'CodeStarSourceConnection'
                Version: '1'
              Configuration:
                ConnectionArn: '{{resolve:ssm:/GitHubConnectionArn/<MY_CONNECTION_NAME>}}'
                BranchName: !Sub '${Environment}'
                FullRepositoryId: !Sub '${GitHubRepository}'
                OutputArtifactFormat: 'CODE_ZIP'
                DetectChanges: 'true'
        - Name: 'Build'
          Actions:
            - Name: 'CloudFormationBuildAction'
              InputArtifacts:
                - Name: 'SourceArtifact'
              OutputArtifacts:
                - Name: 'CloudFormationArtifact'
                # - Name: 'ProductArtifact'
              ActionTypeId:
                Category: 'Build'
                Owner: 'AWS'
                Provider: 'CodeBuild'
                Version: '1'
              Configuration:
                ProjectName: !Sub '${CloudFormationBuildProject}'
                PrimarySource: 'SourceArtifact'
            - Name: 'ContainerBuildAction'
              InputArtifacts:
                - Name: 'SourceArtifact'
              ActionTypeId:
                Category: 'Build'
                Owner: 'AWS'
                Provider: 'CodeBuild'
                Version: '1'
              Configuration:
                BatchEnabled: true
                ProjectName: !Sub '${ContainerBuildProject}'
                PrimarySource: 'SourceArtifact'
        - Name: 'CloudFormationDeploy'
          Actions:
            - Name: 'CloudFormationDeployAction'
              InputArtifacts:
                - Name: 'CloudFormationArtifact'
              ActionTypeId:
                Category: 'Deploy'
                Owner: 'AWS'
                Provider: 'CloudFormation'
                Version: '1'
              Configuration:
                ActionMode: 'CREATE_UPDATE'
                StackName: !Sub '${Application}-${Environment}'
                Capabilities: 'CAPABILITY_IAM,CAPABILITY_NAMED_IAM,CAPABILITY_AUTO_EXPAND'
                RoleArn: !Sub '${CloudFormationDeployRole.Arn}'
                TemplatePath: 'CloudFormationArtifact::build/template_packaged.yml'
                TemplateConfiguration: 'CloudFormationArtifact::build/cfn_configuration.json'
      Tags:
        - Key: 'Application'
          Value: !Sub '${Application}'
        - Key: 'Environment'
          Value: !Sub '${Environment}'
        - Key: 'Resource'
          Value: !Sub 'build-pipeline'
